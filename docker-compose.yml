version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: ai-virtual-try-on-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    command: redis-server --appendonly yes  # 데이터 지속성

  backend:
    build:
      context: ./backend_py
      dockerfile: Dockerfile
    container_name: ai-virtual-try-on-backend-py
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      # Redis 연결 설정
      - CACHE_ENABLED=true
      - REDIS_URL=redis://redis:6379/0
      - CACHE_DEFAULT_TTL=1800
    env_file:
      - ./backend_py/.env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Nginx 프록시 사용: 프런트는 동일 오리진(/api) 호출 → Nginx가 backend로 프록시
        VITE_API_URL: ""
        # Select nginx config: nginx.prod.conf | nginx.dev.conf | nginx.local.conf
        NGINX_CONF: nginx.prod.conf
    container_name: ai-virtual-try-on-frontend
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
