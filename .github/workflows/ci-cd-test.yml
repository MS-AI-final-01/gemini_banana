name: 🧪 Test Environment CI/CD Pipeline

on:
  push:
    branches: [develop_deploy_pipeline]
  pull_request:
    branches: [develop_deploy_pipeline]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend to Test'
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy Frontend to Test'
        type: boolean
        default: true
      skip_tests:
        description: 'Skip Tests (Emergency Deploy)'
        type: boolean
        default: false
      debug_mode:
        description: 'Enable Debug Logging'
        type: boolean
        default: true  # 기본값을 true로 변경

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  # 하드코딩된 Azure 리소스 정보
  BACKEND_APP_NAME_TEST: "7ai-team1-backend-test"
  AZURE_RESOURCE_GROUP_HARDCODED: "7ai-final-team1"

jobs:
  # ========== 품질 게이트 ==========
  quality-gate:
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    name: 🔍 Quality Gate

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🐍 Setup Python (No Pip Cache)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 🔧 Frontend Quality Check
      run: |
        cd frontend
        echo "🔍 Installing frontend dependencies..."
        npm ci --legacy-peer-deps || {
          echo "⚠️ npm ci failed, falling back to npm install"
          rm -f package-lock.json
          npm install --include=dev
        }
        
        echo "🔍 Installing cross-env (Windows/Linux compatibility)..."
        npm install --save-dev cross-env || true
        
        echo "🔍 TypeScript check (lenient for Test environment)..."
        npx tsc --noEmit --skipLibCheck --exclude "**/test/**" --exclude "**/*.test.*" || {
          echo "⚠️ TypeScript warnings exist but continuing for Test environment"
        }
        
        echo "🔍 Build test..."
        rm -rf dist/
        VITE_API_URL=${{ secrets.TEST_BACKEND_URL }} npx vite build --mode test
        
        echo "✅ Frontend quality check passed"

    - name: 🔧 Backend Quality Check
      run: |
        cd backend_py
        echo "🔍 Installing Python dependencies (no cache)..."
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        
        echo "🔍 Python syntax check..."
        python -m py_compile app/main.py
        
        echo "🔍 FastAPI import test..."
        python -c "from app.main import app; print('✅ FastAPI app imports successfully')"
        
        echo "✅ Backend quality check passed"

  # ========== 백엔드 빌드 & 배포 ==========
  deploy-backend:
    if: github.event.inputs.deploy_backend != 'false'
    needs: quality-gate
    runs-on: ubuntu-latest
    name: 🐍 Deploy Backend to Test
    environment: test

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Full Debug Information
      run: |
        echo "=================== FULL DEBUG INFO ==================="
        echo "🔍 Hardcoded App Service: ${{ env.BACKEND_APP_NAME_TEST }}"
        echo "🔍 Hardcoded Resource Group: ${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}"
        echo "🔍 Secret Resource Group: ${{ secrets.AZURE_RESOURCE_GROUP }}"
        echo "🔍 Secret Backend Name: ${{ secrets.BACKEND_WEBAPP_NAME }}"
        echo "🔍 Registry: ${{ env.REGISTRY }}"
        echo "======================================================"

    - name: 🔐 Login to Azure
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: 🔍 Comprehensive Azure Resource Check
      run: |
        echo "🔍 Current Azure account info:"
        az account show --query "{SubscriptionId:id, SubscriptionName:name, TenantId:tenantId, User:user.name}" -o table
        
        echo ""
        echo "🔍 Checking subscription access:"
        az account list --query "[].{Name:name, SubscriptionId:id, State:state}" -o table
        
        echo ""
        echo "🔍 Checking Resource Groups in current subscription:"
        az group list --query "[].{Name:name, Location:location}" -o table
        
        echo ""
        echo "🔍 Checking if hardcoded resource group exists:"
        az group show --name "${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}" --query "{Name:name, Location:location, ProvisioningState:properties.provisioningState}" -o table || {
          echo "❌ Hardcoded resource group '${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}' not found!"
        }
        
        echo ""
        echo "🔍 Checking if secret resource group exists:"
        az group show --name "${{ secrets.AZURE_RESOURCE_GROUP }}" --query "{Name:name, Location:location, ProvisioningState:properties.provisioningState}" -o table || {
          echo "❌ Secret resource group '${{ secrets.AZURE_RESOURCE_GROUP }}' not found!"
        }
        
        echo ""
        echo "🔍 All App Services in hardcoded resource group:"
        az webapp list --resource-group "${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}" --query "[].{Name:name, State:state, Location:location, Kind:kind}" -o table || {
          echo "❌ Cannot list App Services in hardcoded resource group"
        }
        
        echo ""
        echo "🔍 All App Services in secret resource group:"
        az webapp list --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query "[].{Name:name, State:state, Location:location, Kind:kind}" -o table || {
          echo "❌ Cannot list App Services in secret resource group"
        }
        
        echo ""
        echo "🔍 Specifically checking for our target App Service (hardcoded RG):"
        az webapp show --name "${{ env.BACKEND_APP_NAME_TEST }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}" --query "{Name:name, State:state, Location:location, Kind:kind, DefaultHostName:defaultHostName}" -o table || {
          echo "❌ App Service '${{ env.BACKEND_APP_NAME_TEST }}' not found in hardcoded resource group '${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}'"
        }
        
        echo ""
        echo "🔍 Specifically checking for our target App Service (secret RG):"
        az webapp show --name "${{ env.BACKEND_APP_NAME_TEST }}" --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query "{Name:name, State:state, Location:location, Kind:kind, DefaultHostName:defaultHostName}" -o table || {
          echo "❌ App Service '${{ env.BACKEND_APP_NAME_TEST }}' not found in secret resource group '${{ secrets.AZURE_RESOURCE_GROUP }}'"
        }

    - name: 🔐 Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 🏗️ Build and Push Backend Image
      run: |
        cd backend_py
        echo "🏗️ Building backend Docker image for Test environment..."
        
        # 안정성 우선: 캐시 없는 빌드
        docker build \
          --no-cache \
          --platform linux/amd64 \
          -t ${{ env.REGISTRY }}/backend-fastapi-test:latest \
          -t ${{ env.REGISTRY }}/backend-fastapi-test:${{ github.sha }} \
          -f Dockerfile .
        
        echo "📤 Pushing images to ACR..."
        docker push ${{ env.REGISTRY }}/backend-fastapi-test:latest
        docker push ${{ env.REGISTRY }}/backend-fastapi-test:${{ github.sha }}
        
        echo "✅ Backend image build and push completed"

    - name: 🚀 Deploy to Azure App Service (Test - Both Resource Groups)
      run: |
        echo "🚀 Attempting deployment with hardcoded resource group..."
        
        # 방법 1: 하드코딩된 리소스 그룹 사용
        az webapp deploy --name "${{ env.BACKEND_APP_NAME_TEST }}" \
                        --resource-group "${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}" \
                        --type container \
                        --image "${{ env.REGISTRY }}/backend-fastapi-test:latest" || {
          echo "❌ Deployment with hardcoded resource group failed"
          
          echo "🚀 Attempting deployment with secret resource group..."
          # 방법 2: Secret 리소스 그룹 사용
          az webapp deploy --name "${{ env.BACKEND_APP_NAME_TEST }}" \
                          --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
                          --type container \
                          --image "${{ env.REGISTRY }}/backend-fastapi-test:latest" || {
            echo "❌ Deployment with secret resource group also failed"
            
            # 방법 3: azure/webapps-deploy 액션 사용 (원래 방법)
            echo "🚀 Falling back to webapps-deploy action..."
            echo "::set-output name=use_action::true"
          }
        }

    - name: 🚀 Deploy to Azure App Service (Fallback Action)
      if: steps.deploy.outputs.use_action == 'true'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME_TEST }}
        resource-group-name: ${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}  # 명시적으로 리소스 그룹 지정
        images: ${{ env.REGISTRY }}/backend-fastapi-test:latest

    - name: ⚙️ Configure Test Environment Variables (Multiple Attempts)
      run: |
        echo "⚙️ Configuring environment variables..."
        
        # 하드코딩된 리소스 그룹으로 시도
        az webapp config appsettings set \
          --name "${{ env.BACKEND_APP_NAME_TEST }}" \
          --resource-group "${{ env.AZURE_RESOURCE_GROUP_HARDCODED }}" \
          --settings \
            PORT=3001 \
            HOST=0.0.0.0 \
            NODE_ENV=test \
            FRONTEND_URL="${{ secrets.TEST_FRONTEND_URL }}" \
            GEMINI_API_KEY="${{ secrets.TEST_GEMINI_API_KEY }}" \
            AZURE_OPENAI_ENDPOINT="${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}" \
            AZURE_OPENAI_KEY="${{ secrets.TEST_AZURE_OPENAI_KEY }}" \
            AZURE_OPENAI_DEPLOYMENT_ID="${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_ID }}" \
            AZURE_OPENAI_API_VERSION="2024-02-15-preview" || {
          
          echo "⚠️ Failed with hardcoded resource group, trying secret resource group..."
          
          # Secret 리소스 그룹으로 시도
          az webapp config appsettings set \
            --name "${{ env.BACKEND_APP_NAME_TEST }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --settings \
              PORT=3001 \
              HOST=0.0.0.0 \
              NODE_ENV=test \
              FRONTEND_URL="${{ secrets.TEST_FRONTEND_URL }}" \
              GEMINI_API_KEY="${{ secrets.TEST_GEMINI_API_KEY }}" \
              AZURE_OPENAI_ENDPOINT="${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}" \
              AZURE_OPENAI_KEY="${{ secrets.TEST_AZURE_OPENAI_KEY }}" \
              AZURE_OPENAI_DEPLOYMENT_ID="${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_ID }}" \
              AZURE_OPENAI_API_VERSION="2024-02-15-preview"
        }

  # 나머지 jobs는 동일하게 유지...
  deploy-frontend:
    if: github.event.inputs.deploy_frontend != 'false'
    needs: quality-gate
    runs-on: ubuntu-latest
    name: 🎨 Deploy Frontend to Test
    environment: test

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js with Cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🔧 Install and Build Frontend (Test)
      run: |
        cd frontend
        npm ci --legacy-peer-deps || {
          rm -f package-lock.json
          npm install --include=dev
        }
        npm install --save-dev cross-env || true
        npx tsc --noEmit --skipLibCheck --exclude "**/test/**" --exclude "**/*.test.*" || true
        rm -rf dist/
        export VITE_API_URL="${{ secrets.TEST_BACKEND_URL }}"
        export VITE_NODE_ENV="test"
        export VITE_DEV_MODE="false"
        npx vite build --mode test
        ls -la dist/

    - name: 🚀 Deploy to Azure Static Web Apps (Test)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend/dist"
        skip_app_build: true
        production_branch: "develop_deploy_pipeline"

  # 헬스체크는 간소화
  health-check:
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    runs-on: ubuntu-latest
    name: 🏥 Health Check

    steps:
    - name: 🏥 Basic Health Check
      run: |
        echo "🔍 Checking services..."
        if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
          curl -f -s --max-time 30 "${{ secrets.TEST_BACKEND_URL }}/health" && echo "✅ Backend healthy" || echo "❌ Backend unhealthy"
        fi
        if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          curl -f -s --max-time 30 "${{ secrets.TEST_FRONTEND_URL }}" && echo "✅ Frontend healthy" || echo "❌ Frontend unhealthy"
        fi
