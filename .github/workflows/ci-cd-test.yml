name: Deploy AI Virtual Try-On to Test Environment

on:
  push:
    branches: [main, develop, develop_deploy_pipeline]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포할 환경을 선택하세요'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production
      backend_deploy:
        description: '백엔드 배포 여부'
        required: true
        default: true
        type: boolean
      frontend_deploy:
        description: '프론트엔드 배포 여부'
        required: true
        default: true
        type: boolean

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  BACKEND_IMAGE: backend-fastapi
  FRONTEND_IMAGE: frontend-react

jobs:
  # 🐳 백엔드 빌드 및 푸시
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ 핵심: Docker Buildx 설정 (반드시 첫 번째로!)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend_py
          file: ./backend_py/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=test

      - name: Backend Build Summary
        run: |
          echo "✅ 백엔드 빌드 및 푸시 완료"
          echo "🏷️ Tags: latest, ${{ github.sha }}"

  # ⚛️ 프론트엔드 빌드 및 푸시
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install and Build Frontend
        env:
          VITE_API_URL: ${{ secrets.TEST_BACKEND_URL || 'http://localhost:3001' }}
          NODE_ENV: production
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          npm run build
          ls -la dist/
          echo "✅ 프론트엔드 빌드 완료"

      # ✅ 핵심: Docker Buildx 설정 (반드시 Docker 명령 전에!)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          use: true

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: "dist"
          skip_app_build: true

      - name: Frontend Build Summary
        run: |
          echo "✅ 프론트엔드 빌드 및 푸시 완료"
          echo "🏷️ Tags: latest, ${{ github.sha }}"

  # 🚀 백엔드 배포
  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    if: github.event.inputs.backend_deploy != 'false'
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      - name: Set Environment Variables
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          app-settings-json: |
            [
              {
                "name": "PORT",
                "value": "3001"
              },
              {
                "name": "NODE_ENV",
                "value": "production"
              },
              {
                "name": "GEMINI_API_KEY",
                "value": "${{ secrets.TEST_GEMINI_API_KEY }}"
              },
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}"
              },
              {
                "name": "AZURE_OPENAI_KEY",
                "value": "${{ secrets.TEST_AZURE_OPENAI_KEY }}"
              },
              {
                "name": "AZURE_OPENAI_DEPLOYMENT_ID",
                "value": "${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_ID }}"
              }
            ]

  # 🧪 헬스체크
  health-check:
    needs: [deploy-backend, build-frontend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Wait for services
        run: sleep 30

      - name: Backend Health Check
        if: needs.deploy-backend.result == 'success'
        run: |
          if [ -n "${{ secrets.TEST_BACKEND_URL }}" ]; then
            curl -f "${{ secrets.TEST_BACKEND_URL }}/health" || echo "⚠️ 헬스체크 경고"
          fi

      - name: Deployment Summary
        run: |
          echo "🎉 배포 결과 요약"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📅 시간: $(date)"
          echo "🌿 브랜치: ${{ github.ref_name }}"
          echo "📝 커밋: ${{ github.sha }}"
          echo "👤 실행자: ${{ github.actor }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🏗️ 백엔드: ${{ needs.build-backend.result }}"
          echo "🎨 프론트엔드: ${{ needs.build-frontend.result }}"
          echo "🚀 배포: ${{ needs.deploy-backend.result }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
