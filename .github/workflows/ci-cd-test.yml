name: Deploy AI Virtual Try-On to Test Environment

on:
  push:
    branches: [main, develop, develop_deploy_pipeline]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  # 🐳 백엔드 빌드
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend_py
          file: ./backend_py/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/backend-fastapi:latest
            ${{ env.REGISTRY }}/backend-fastapi:${{ github.sha }}

  # ⚛️ 프론트엔드 빌드
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install and Build Frontend
        env:
          VITE_API_URL: ${{ secrets.TEST_BACKEND_URL }}
        run: |
          cd frontend
          rm -rf node_modules dist .vite
          if [ -f package-lock.json ]; then npm ci; else npm install --include=dev; fi
          npm run build
          ls -la dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            NGINX_CONF=nginx.prod.conf
            VITE_API_URL=${{ secrets.TEST_BACKEND_URL }}
          tags: |
            ${{ env.REGISTRY }}/frontend-react:latest
            ${{ env.REGISTRY }}/frontend-react:${{ github.sha }}

      - name: Deploy to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: "dist"
          skip_app_build: true

  # 🚀 백엔드 배포 (표준 AZURE_CREDENTIALS 사용)
  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/backend-fastapi:${{ github.sha }}

  # 📊 결과 알림
  notify:
    needs: [build-backend, build-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary
        run: |
          echo "🎉 AI Virtual Try-On 배포 결과"
          echo "백엔드: ${{ needs.build-backend.result }}"
          echo "프론트엔드: ${{ needs.build-frontend.result }}"
          echo "배포: ${{ needs.deploy-backend.result }}"
