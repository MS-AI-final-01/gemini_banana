name: Deploy AI Virtual Try-On to Test Environment

on:
  push:
    branches: [main, develop, develop_deploy_pipeline]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포할 환경을 선택하세요'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production
      
      backend_deploy:
        description: '백엔드 배포 여부'
        required: true
        default: true
        type: boolean

      frontend_deploy:
        description: '프론트엔드 배포 여부'
        required: true
        default: true
        type: boolean

      version_tag:
        description: '배포할 버전 (예: v1.2.3)'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  BACKEND_IMAGE: backend-fastapi
  FRONTEND_IMAGE: frontend-react

jobs:
  # 🔍 코드 품질 및 보안 검사
  quality-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.backend == 'true' || steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch' }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend_py/**'
              - 'requirements.txt'
              - 'Dockerfile'
            frontend:
              - 'frontend/**'
              - 'package*.json'
            config:
              - 'docker-compose*.yml'
              - '.github/workflows/**'

      - name: Setup Python for Backend Linting
        if: steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        if: steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd backend_py
          pip install -r requirements.txt

      - name: Python Code Quality Check
        if: steps.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd backend_py
          # 기본 문법 체크
          python -m py_compile app/main.py
          echo "✅ Python 코드 문법 검사 완료"

      - name: Setup Node.js for Frontend
        if: steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend dependencies
        if: steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Frontend Build Test
        if: steps.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          cd frontend
          # TypeScript 타입 체크
          npx tsc --noEmit
          # 빌드 테스트
          npm run build
          echo "✅ 프론트엔드 빌드 테스트 완료"

  # 🐳 백엔드 빌드 및 푸시
  build-backend:
    needs: quality-checks
    if: needs.quality-checks.outputs.should-deploy == 'true' && (needs.quality-checks.outputs.backend-changed == 'true' || github.event.inputs.backend_deploy == 'true' || github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      backend-image-tag: ${{ steps.meta.outputs.tags }}
      backend-image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ 핵심: Docker Buildx 설정 (캐시 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata for Backend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.version_tag }},enable=${{ github.event.inputs.version_tag != '' }}

      - name: Build and push Backend
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend_py
          file: ./backend_py/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=${{ github.event.inputs.environment || 'test' }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: Backend Build Summary
        run: |
          echo "✅ 백엔드 빌드 완료"
          echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}"
          echo "🔍 Digest: ${{ steps.build.outputs.digest }}"

  # ⚛️ 프론트엔드 빌드 및 배포
  build-frontend:
    needs: quality-checks
    if: needs.quality-checks.outputs.should-deploy == 'true' && (needs.quality-checks.outputs.frontend-changed == 'true' || github.event.inputs.frontend_deploy == 'true' || github.event_name == 'push')
    runs-on: ubuntu-latest
    outputs:
      frontend-image-tag: ${{ steps.frontend-meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Build Frontend
        env:
          VITE_API_URL: ${{ secrets.TEST_BACKEND_URL || 'http://localhost:3001' }}
          NODE_ENV: production
        run: |
          cd frontend
          npm run build
          ls -la dist/
          echo "✅ 프론트엔드 빌드 완료"

      # ✅ 핵심: Docker Buildx 설정 (캐시 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata for Frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.version_tag }},enable=${{ github.event.inputs.version_tag != '' }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Static Web Apps 배포 (선택사항)
      - name: Deploy to Static Web Apps
        if: secrets.AZURE_STATIC_WEB_APPS_API_TOKEN != ''
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: "dist"
          skip_app_build: true

      - name: Frontend Build Summary
        run: |
          echo "✅ 프론트엔드 빌드 완료"
          echo "🏷️ Tags: ${{ steps.frontend-meta.outputs.tags }}"

  # 🚀 백엔드 Azure App Service 배포
  deploy-backend:
    needs: [quality-checks, build-backend]
    if: needs.build-backend.result == 'success'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'test' }}
      url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure App Service
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          slot-name: ${{ github.event.inputs.environment || 'test' }}
          images: ${{ needs.build-backend.outputs.backend-image-tag }}

      - name: Set App Service Environment Variables
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          slot-name: ${{ github.event.inputs.environment || 'test' }}
          app-settings-json: |
            [
              {
                "name": "PORT",
                "value": "3001"
              },
              {
                "name": "NODE_ENV", 
                "value": "${{ github.event.inputs.environment || 'test' }}"
              },
              {
                "name": "HOST",
                "value": "0.0.0.0"
              },
              {
                "name": "GEMINI_API_KEY",
                "value": "${{ secrets.TEST_GEMINI_API_KEY }}"
              },
              {
                "name": "AZURE_OPENAI_ENDPOINT",
                "value": "${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}"
              },
              {
                "name": "AZURE_OPENAI_KEY",
                "value": "${{ secrets.TEST_AZURE_OPENAI_KEY }}"
              },
              {
                "name": "AZURE_OPENAI_DEPLOYMENT_ID",
                "value": "${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_ID || 'gpt-4o' }}"
              },
              {
                "name": "FRONTEND_URL",
                "value": "${{ secrets.TEST_FRONTEND_URL }}"
              }
            ]

      - name: Backend Deployment Summary
        run: |
          echo "✅ 백엔드 배포 완료"
          echo "🔗 URL: ${{ steps.deploy.outputs.webapp-url }}"

  # 🧪 배포 후 테스트
  post-deploy-tests:
    needs: [deploy-backend, build-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.build-frontend.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Wait for deployment stabilization
        run: |
          echo "⏳ 배포 안정화 대기 중..."
          sleep 60

      - name: Health Check - Backend
        if: needs.deploy-backend.result == 'success'
        run: |
          echo "🔍 백엔드 헬스체크 시작..."
          backend_url="${{ secrets.TEST_BACKEND_URL }}"
          if [ -z "$backend_url" ]; then
            echo "⚠️ TEST_BACKEND_URL이 설정되지 않음"
            exit 0
          fi
          
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "시도 $attempt/$max_attempts: $backend_url/health"
            if curl -f -s "$backend_url/health" > /dev/null; then
              echo "✅ 백엔드 헬스체크 성공!"
              exit 0
            fi
            echo "❌ 헬스체크 실패, 30초 후 재시도..."
            sleep 30
            attempt=$((attempt + 1))
          done
          
          echo "⚠️ 백엔드 헬스체크 최종 실패 (계속 진행)"

      - name: API Integration Tests
        if: needs.deploy-backend.result == 'success'
        run: |
          echo "🧪 API 통합 테스트 시작..."
          backend_url="${{ secrets.TEST_BACKEND_URL }}"
          if [ -z "$backend_url" ]; then
            echo "⚠️ TEST_BACKEND_URL이 설정되지 않아 API 테스트 스킵"
            exit 0
          fi
          
          # Generate 상태 테스트
          echo "테스트 1: Generate Status"
          curl -f -s "$backend_url/api/generate/status" || echo "⚠️ Generate status 테스트 실패"
          
          # Recommend 상태 테스트  
          echo "테스트 2: Recommend Status"
          curl -f -s "$backend_url/api/recommend/status" || echo "⚠️ Recommend status 테스트 실패"
          
          # API 정보 테스트
          echo "테스트 3: API Info"
          curl -f -s "$backend_url/api" || echo "⚠️ API info 테스트 실패"
          
          echo "✅ API 통합 테스트 완료"

  # 📊 배포 결과 알림
  notify:
    needs: [build-backend, build-frontend, deploy-backend, post-deploy-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Calculate overall status
        id: status
        run: |
          backend_status="${{ needs.build-backend.result }}"
          frontend_status="${{ needs.build-frontend.result }}"
          deploy_status="${{ needs.deploy-backend.result }}"
          test_status="${{ needs.post-deploy-tests.result }}"
          
          if [[ "$backend_status" == "success" && "$frontend_status" == "success" && "$deploy_status" == "success" ]]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
          elif [[ "$backend_status" == "failure" || "$frontend_status" == "failure" || "$deploy_status" == "failure" ]]; then
            echo "overall_status=failure" >> $GITHUB_OUTPUT
          else
            echo "overall_status=partial" >> $GITHUB_OUTPUT
          fi

      - name: Notify Success
        if: steps.status.outputs.overall_status == 'success'
        run: |
          echo "🎉 AI Virtual Try-On 배포 성공!"
          echo "┌─────────────────────────────────────┐"
          echo "│             배포 완료               │"
          echo "├─────────────────────────────────────┤"
          echo "│ 환경: ${{ github.event.inputs.environment || 'test' }}"
          echo "│ 브랜치: ${{ github.ref_name }}"
          echo "│ 커밋: ${{ github.sha }}"
          echo "│ 실행자: ${{ github.actor }}"
          echo "└─────────────────────────────────────┘"
          echo ""
          echo "🔗 서비스 URL:"
          echo "   백엔드: ${{ secrets.TEST_BACKEND_URL }}"
          echo "   프론트엔드: ${{ secrets.TEST_FRONTEND_URL }}"

      - name: Notify Failure
        if: steps.status.outputs.overall_status == 'failure'
        run: |
          echo "❌ AI Virtual Try-On 배포 실패!"
          echo "┌─────────────────────────────────────┐"
          echo "│             배포 실패               │"
          echo "├─────────────────────────────────────┤"
          echo "│ 환경: ${{ github.event.inputs.environment || 'test' }}"
          echo "│ 브랜치: ${{ github.ref_name }}"
          echo "│ 커밋: ${{ github.sha }}"
          echo "│ 실행자: ${{ github.actor }}"
          echo "└─────────────────────────────────────┘"
          echo ""
          echo "📝 다음 단계:"
          echo "   1. Actions 탭에서 상세 로그 확인"
          echo "   2. 실패한 단계의 오류 메시지 검토"
          echo "   3. 수정 후 다시 배포"

      - name: Notify Partial Success
        if: steps.status.outputs.overall_status == 'partial'
        run: |
          echo "⚠️ AI Virtual Try-On 부분 배포 완료"
          echo "┌─────────────────────────────────────┐"
          echo "│           부분 배포 완료            │"
          echo "├─────────────────────────────────────┤"
          echo "│ 환경: ${{ github.event.inputs.environment || 'test' }}"
          echo "│ 백엔드: ${{ needs.build-backend.result }}"
          echo "│ 프론트엔드: ${{ needs.build-frontend.result }}"
          echo "│ 배포: ${{ needs.deploy-backend.result }}"
          echo "│ 테스트: ${{ needs.post-deploy-tests.result }}"
          echo "└─────────────────────────────────────┘"
