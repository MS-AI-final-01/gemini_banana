name: Deploy AI Virtual Try-On to Test Environment

on:
  push:
    branches: [main, develop, test]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  # 🐳 백엔드 빌드
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # ✅ 캐시 제거 - 일단 문제없이 빌드부터
      - name: Build and push Backend (No Cache)
        uses: docker/build-push-action@v5
        with:
          context: ./backend_py
          file: ./backend_py/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/backend-fastapi:latest
            ${{ env.REGISTRY }}/backend-fastapi:${{ github.sha }}

  # ⚛️ 프론트엔드 빌드
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # ✅ cross-env 문제 해결
      - name: Install and Build Frontend (Fixed)
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.TEST_BACKEND_URL || 'http://localhost:3001' }}
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          
          # cross-env 설치
          npm install --save-dev cross-env
          
          # 직접 빌드 (cross-env 우회)
          rm -rf dist/
          npx vite build
          
          ls -la dist/
          echo "✅ 프론트엔드 빌드 완료"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      # ✅ 캐시 제거 - 일단 문제없이 빌드부터
      - name: Build and push Frontend (No Cache)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/frontend-react:latest
            ${{ env.REGISTRY }}/frontend-react:${{ github.sha }}

      - name: Deploy to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: "dist"
          skip_app_build: true

  # 🚀 백엔드 배포
  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/backend-fastapi:${{ github.sha }}

  # 📊 결과 알림
  notify:
    needs: [build-backend, build-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary
        run: |
          echo "🎉 배포 완료!"
          echo "백엔드: ${{ needs.build-backend.result }}"
          echo "프론트엔드: ${{ needs.build-frontend.result }}"
          echo "배포: ${{ needs.deploy-backend.result }}"
