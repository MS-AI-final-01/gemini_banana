name: Deploy AI Virtual Try-On to Test Environment

on:
  push:
    branches: [main, develop, develop_deploy_pipeline]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  # 🐳 백엔드 빌드
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend_py
          file: ./backend_py/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/backend-fastapi:latest
            ${{ env.REGISTRY }}/backend-fastapi:${{ github.sha }}

  # ⚛️ 프론트엔드 빌드 (호환성 우선)
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Node.js 20으로 업그레이드 (React 19 + Vite 6 호환)
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # ✅ 서버용 단순 빌드 (Windows 스크립트 우회)
      - name: Install and Build Frontend (Linux CI)
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.TEST_BACKEND_URL }}
        run: |
          cd frontend
          
          # 깨끗한 초기화
          rm -rf node_modules package-lock.json dist/ .vite
          
          # 의존성 설치 (--legacy-peer-deps 사용)
          npm install --legacy-peer-deps
          
          # 서버용 단순 빌드 (복잡한 스크립트 우회)
          NODE_ENV=production npx vite build
          
          # 빌드 확인
          ls -la dist/
          echo "✅ 프론트엔드 빌드 완료"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          build-args: |
            NGINX_CONF=nginx.prod.conf
            VITE_API_URL=${{ secrets.TEST_BACKEND_URL }}
          tags: |
            ${{ env.REGISTRY }}/frontend-react:latest
            ${{ env.REGISTRY }}/frontend-react:${{ github.sha }}

      - name: Deploy to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/frontend"
          output_location: "dist"
          skip_app_build: true

  # 🚀 백엔드 배포 (기존 서비스 주체 사용)
  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      # ✅ 기존 Azure 서비스 주체 방식 유지
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.BACKEND_WEBAPP_NAME }}
          images: ${{ env.REGISTRY }}/backend-fastapi:${{ github.sha }}

  # 📊 결과 알림
  notify:
    needs: [build-backend, build-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary
        run: |
          echo "🎉 AI Virtual Try-On 배포 결과"
          echo "백엔드: ${{ needs.build-backend.result }}"
          echo "프론트엔드: ${{ needs.build-frontend.result }}"
          echo "배포: ${{ needs.deploy-backend.result }}"
          echo "SHA: ${{ github.sha }}"
