name: üß™ Test Environment CI/CD Pipeline

on:
  push:
    branches: [develop_deploy_pipeline]
  pull_request:
    branches: [develop_deploy_pipeline]
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend to Test'
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy Frontend to Test'
        type: boolean
        default: true
      skip_tests:
        description: 'Skip Tests (Emergency Deploy)'
        type: boolean
        default: false
      debug_mode:
        description: 'Enable Debug Logging'
        type: boolean
        default: false

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  # Ïã§Ï†ú App Service Ïù¥Î¶ÑÏùÑ ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú ÏÑ§Ï†ï
  BACKEND_APP_NAME_TEST: "7ai-team1-backend-test"

jobs:
  # ========== ÌíàÏßà Í≤åÏù¥Ìä∏ (ÎèôÏùº) ==========
  quality-gate:
    if: github.event.inputs.skip_tests != 'true'
    runs-on: ubuntu-latest
    name: üîç Quality Gate

    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üêç Setup Python (No Pip Cache)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: üîß Frontend Quality Check
      run: |
        cd frontend
        echo "üîç Installing frontend dependencies..."
        npm ci --legacy-peer-deps || {
          echo "‚ö†Ô∏è npm ci failed, falling back to npm install"
          rm -f package-lock.json
          npm install --include=dev
        }
        
        echo "üîç Installing cross-env (Windows/Linux compatibility)..."
        npm install --save-dev cross-env || true
        
        echo "üîç TypeScript check (lenient for Test environment)..."
        npx tsc --noEmit --skipLibCheck --exclude "**/test/**" --exclude "**/*.test.*" || {
          echo "‚ö†Ô∏è TypeScript warnings exist but continuing for Test environment"
        }
        
        echo "üîç Build test..."
        rm -rf dist/
        VITE_API_URL=${{ secrets.TEST_BACKEND_URL }} npx vite build --mode test
        
        echo "‚úÖ Frontend quality check passed"

    - name: üîß Backend Quality Check
      run: |
        cd backend_py
        echo "üîç Installing Python dependencies (no cache)..."
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        
        echo "üîç Python syntax check..."
        python -m py_compile app/main.py
        
        echo "üîç FastAPI import test..."
        python -c "from app.main import app; print('‚úÖ FastAPI app imports successfully')"
        
        echo "‚úÖ Backend quality check passed"

  # ========== Î∞±ÏóîÎìú ÎπåÎìú & Î∞∞Ìè¨ (ÏàòÏ†ïÎê®) ==========
  deploy-backend:
    if: github.event.inputs.deploy_backend != 'false'
    needs: quality-gate
    runs-on: ubuntu-latest
    name: üêç Deploy Backend to Test
    environment: test

    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4

    - name: üîç Debug App Service Configuration
      run: |
        echo "=== App Service Debug Info ==="
        echo "Target App Service: ${{ env.BACKEND_APP_NAME_TEST }}"
        echo "Resource Group: ${{ secrets.AZURE_RESOURCE_GROUP }}"
        echo "Secret BACKEND_WEBAPP_NAME: ${{ secrets.BACKEND_WEBAPP_NAME }}"
        echo "Registry: ${{ env.REGISTRY }}"

    - name: üîê Login to Azure
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: ‚úÖ Verify Azure Login & Resources
      run: |
        echo "üîç Verifying Azure authentication..."
        az account show --query "{SubscriptionId:id, TenantId:tenantId, User:user.name}"
        
        echo "üîç Checking if App Service exists..."
        az webapp show --name "${{ env.BACKEND_APP_NAME_TEST }}" --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query "{Name:name, State:state, Location:location}" || {
          echo "‚ùå App Service not found! Available App Services:"
          az webapp list --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" --query "[].{Name:name, State:state}" -o table
          exit 1
        }
        
        echo "‚úÖ Azure resources verified successfully"

    - name: üîê Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: üèóÔ∏è Build and Push Backend Image
      run: |
        cd backend_py
        echo "üèóÔ∏è Building backend Docker image for Test environment..."
        
        # ÏïàÏ†ïÏÑ± Ïö∞ÏÑ†: Ï∫êÏãú ÏóÜÎäî ÎπåÎìú
        docker build \
          --no-cache \
          --platform linux/amd64 \
          -t ${{ env.REGISTRY }}/backend-fastapi-test:latest \
          -t ${{ env.REGISTRY }}/backend-fastapi-test:${{ github.sha }} \
          -f Dockerfile .
        
        echo "üì§ Pushing images to ACR..."
        docker push ${{ env.REGISTRY }}/backend-fastapi-test:latest
        docker push ${{ env.REGISTRY }}/backend-fastapi-test:${{ github.sha }}
        
        echo "‚úÖ Backend image build and push completed"

    - name: üöÄ Deploy to Azure App Service (Test - Fixed)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.BACKEND_APP_NAME_TEST }}  # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÇ¨Ïö©
        images: ${{ env.REGISTRY }}/backend-fastapi-test:latest

    - name: ‚öôÔ∏è Configure Test Environment Variables
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.BACKEND_APP_NAME_TEST }}  # ÌôòÍ≤ΩÎ≥ÄÏàò ÏÇ¨Ïö©
        app-settings-json: |
          [
            { "name": "PORT", "value": "3001" },
            { "name": "HOST", "value": "0.0.0.0" },
            { "name": "NODE_ENV", "value": "test" },
            { "name": "FRONTEND_URL", "value": "${{ secrets.TEST_FRONTEND_URL }}" },
            { "name": "GEMINI_API_KEY", "value": "${{ secrets.TEST_GEMINI_API_KEY }}" },
            { "name": "AZURE_OPENAI_ENDPOINT", "value": "${{ secrets.TEST_AZURE_OPENAI_ENDPOINT }}" },
            { "name": "AZURE_OPENAI_KEY", "value": "${{ secrets.TEST_AZURE_OPENAI_KEY }}" },
            { "name": "AZURE_OPENAI_DEPLOYMENT_ID", "value": "${{ secrets.TEST_AZURE_OPENAI_DEPLOYMENT_ID }}" },
            { "name": "AZURE_OPENAI_API_VERSION", "value": "2024-02-15-preview" }
          ]

  # ========== ÌîÑÎ°†Ìä∏ÏóîÎìú ÎπåÎìú & Î∞∞Ìè¨ (ÎèôÏùº) ==========
  deploy-frontend:
    if: github.event.inputs.deploy_frontend != 'false'
    needs: quality-gate
    runs-on: ubuntu-latest
    name: üé® Deploy Frontend to Test
    environment: test

    steps:
    - name: üì¶ Checkout Code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js with Cache
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üîß Install and Build Frontend (Test)
      run: |
        cd frontend
        echo "üì¶ Installing dependencies with fallback strategy..."
        
        npm ci --legacy-peer-deps || {
          echo "‚ö†Ô∏è npm ci failed, using fallback strategy for Windows‚ÜíLinux compatibility"
          rm -f package-lock.json
          npm install --include=dev
        }
        
        echo "üîß Installing cross-env for cross-platform compatibility..."
        npm install --save-dev cross-env || true
        
        echo "üîç TypeScript validation (lenient for Test)..."
        npx tsc --noEmit --skipLibCheck --exclude "**/test/**" --exclude "**/*.test.*" || {
          echo "‚ö†Ô∏è TypeScript warnings exist but continuing for Test environment"
        }
        
        echo "üèóÔ∏è Building for Test environment..."
        rm -rf dist/
        
        export VITE_API_URL="${{ secrets.TEST_BACKEND_URL }}"
        export VITE_NODE_ENV="test"
        export VITE_DEV_MODE="false"
        
        npx vite build --mode test
        
        echo "üìã Build verification..."
        ls -la dist/
        echo "‚úÖ Frontend build completed successfully"

    - name: üöÄ Deploy to Azure Static Web Apps (Test)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "frontend/dist"
        skip_app_build: true
        production_branch: "develop_deploy_pipeline"

  # ========== Ìó¨Ïä§Ï≤¥ÌÅ¨ & ÏïåÎ¶º (ÎèôÏùº) ==========
  health-check:
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    runs-on: ubuntu-latest
    name: üè• Health Check & Notification

    steps:
    - name: üè• Backend Health Check
      if: needs.deploy-backend.result == 'success'
      run: |
        echo "üîç Checking backend health..."
        BACKEND_URL="${{ secrets.TEST_BACKEND_URL }}"
        
        for i in {1..12}; do
          echo "üì° Health check attempt $i/12..."
          
          if curl -f -s --max-time 30 "${BACKEND_URL}/health"; then
            echo "‚úÖ Backend is healthy!"
            echo "BACKEND_HEALTH=success" >> $GITHUB_ENV
            break
          elif [ $i -eq 12 ]; then
            echo "‚ùå Backend health check failed after 12 attempts"
            echo "BACKEND_HEALTH=failed" >> $GITHUB_ENV
            exit 1
          else
            echo "‚è≥ Attempt $i failed, retrying in 30s..."
            sleep 30
          fi
        done

    - name: üè• Frontend Health Check
      if: needs.deploy-frontend.result == 'success'
      run: |
        echo "üîç Checking frontend health..."
        FRONTEND_URL="${{ secrets.TEST_FRONTEND_URL }}"
        
        if curl -f -s --max-time 30 "${FRONTEND_URL}"; then
          echo "‚úÖ Frontend is healthy!"
          echo "FRONTEND_HEALTH=success" >> $GITHUB_ENV
        else
          echo "‚ùå Frontend health check failed"
          echo "FRONTEND_HEALTH=failed" >> $GITHUB_ENV
          exit 1
        fi

    - name: üìä Test Deployment Summary
      run: |
        echo "## üß™ Test Environment Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Status | Health | URL |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|---------|-----|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ${{ needs.deploy-backend.result }} | ${{ env.BACKEND_HEALTH }} | ${{ secrets.TEST_BACKEND_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ${{ needs.deploy-frontend.result }} | ${{ env.FRONTEND_HEALTH }} | ${{ secrets.TEST_FRONTEND_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| App Service | ${{ env.BACKEND_APP_NAME_TEST }} | - | - |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} | - | - |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} | - | - |" >> $GITHUB_STEP_SUMMARY
        echo "| Triggered By | ${{ github.actor }} | - | - |" >> $GITHUB_STEP_SUMMARY
        
        echo "üéØ **Test Environment Ready for Validation!**" >> $GITHUB_STEP_SUMMARY

    - name: üìß Success Notification
      if: success()
      run: |
        echo "üéâ Test deployment successful!"
        echo "Backend: ${{ secrets.TEST_BACKEND_URL }}/health"
        echo "Frontend: ${{ secrets.TEST_FRONTEND_URL }}"
        echo "App Service: ${{ env.BACKEND_APP_NAME_TEST }}"

    - name: üö® Failure Notification
      if: failure()
      run: |
        echo "üí• Test deployment failed!"
        echo "Check the logs above for details"
        exit 1

  # ========== ÏûêÎèô Î°§Î∞± (ÏàòÏ†ïÎê®) ==========
  auto-rollback:
    needs: health-check
    if: failure()
    runs-on: ubuntu-latest
    name: üîÑ Auto Rollback
    environment: test

    steps:
    - name: üîê Login to Azure (for rollback)
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: üîÑ Rollback Backend (if needed)
      if: needs.deploy-backend.result == 'success'
      run: |
        echo "üîÑ Rolling back backend to previous version..."
        echo "App Service: ${{ env.BACKEND_APP_NAME_TEST }}"
        # TODO: Ïã§Ï†ú Î°§Î∞± Î°úÏßÅ Íµ¨ÌòÑ
        echo "üö® Manual intervention required for backend rollback"

    - name: üìß Rollback Notification
      run: |
        echo "üîÑ Auto rollback initiated due to health check failure"
        echo "Manual verification and intervention may be required"
